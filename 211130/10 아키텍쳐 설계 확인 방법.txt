
아키텍처 설계 확인 방법

학습목표
▷ 설계된 아키텍처를 분석할 수 있다.
▷ 아키텍처 검증을 통해 적합한 아키텍처를 결정할 수 있다.
 
학습내용
▷ 아키텍처 분석
▷ 아키텍처 결정

아키텍처 분석

1. 아키텍처 분석 배경 및 목적
1) 배경
아키텍처는 의사결정의 중요한 수단

! 아키텍처를 분석하는 배경은?
▷ 위험 요소나 불확실한 상황에 대한 중요한 의사결정을 하기 어려움
▷ 아키텍처가 목표로 하는 품질을 어느 정도 만족시켰는지 판단 필요

2) 목적

소프트웨어 프로젝트의 실패 사전 방지

문제를 찾아내는 시기의 빠름

더 나은 소프트웨어의 개발이 가능하고 더 좋은 아키텍처 설계가 가능

적합하지 못한 아키텍처 탐색

잘못된 아키텍처를 설계한 프로젝트를 찾아내서 품질 불량 최소화

! 시스템 품질 불량의 가장 큰 원인은?

소프트웨어 아키텍처의 부재	→
			→ 품질불량
부적합한 아키텍처 설계	→	

3) 필요성

문제점 조기 식별 가능

시스템 품질, 프로젝트 일정,  예산, 조직 구조 등에 영향

4) 장점
CheckPoint1 이해관계자 간의 의사소통
CheckPoint2 우선순위 결정 가능
▷ 명확한 품질 목표 정의
CheckPoint3 프로젝트 간 재사용 기회 향상 및 아키텍처 수립 사례 확보 가능
▷ 아키텍처 정의

5) 아키텍처 분석 조직
평가팀
▷ 전체적인 평가 리딩
▷ 분석 수행

스테이크 홀더
▷ 아키텍처 관련 이해관계자
▷ 개발팀
→ Coderr integrator, Tester, Maintainer 등
▷ 의사결정권자, 아키텍트
▷ 컴포지트 설계장, 프로젝트 관리자
▷ 고객, 스폰서 등

2. 아키텍처 분석 시점

설계가 어느 정도 명확해지고 수행이 가능하며 본격적인 구현 단계에 착수 전 진행

일반적으로 요구사항 분석 후 상세설계 전, 아키텍처 분석 진행

최근, 개발 라이프 사이클 동안 모든 단계에서 언제든 아키텍처 검증 수행 가능
			↑
▷ 특별히 정해진 단계, 프로세스는 없음

1) 아키텍처 정의 도중 평가
▷ 목적 : 품질 및 기능 요구사항 만족
▷ 산출물 : 좀 더 견고한 요구사항명세

2) 요구사항이 고정되기 전에 평가
▷ 참여자 : 소수의 이해관계자 및 의사결정권자
▷ 산출물 : 우선순위가 매겨진 요구사항 목록이 추가

3) 아키텍처가 고정되고 구현이 끝난 다음 평가
▷ 평가 자체 : 기존 레가시(Legacy)를 이해하는 데 도움이 됨
▷ 레가시 아키텍처를 평가하는 기법 : 아키텍처를 새로 만드는 경우와 동일

3. 아키텍처 분석 과정
1) 분석 검증 과정 요약

평가 대상 아키텍처 → 설계분석 및 검증(아키텍처 이해분석, 검증) →	▷ 아키텍처 이해
							▷ 아키텍처 분석
							▷ 아키텍처 검증


평가 대상 아키텍처
▷ 검증 활동 소개
▷ 개발 대상 시스템 환경 설명 자료
▷ 품질 속성 시나리오
▷ 아키텍처 설계 뷰 및 문서
▷ 기타 관련 문서

설계분석 및 검증(아키텍처 이해분석, 검증)

진행 리더 	검증 리더

질문자		분석, 설계 검증팀

▷ 아키텍처 개요 설명 자료
▷ 품질 속성 시나리오
▷ 아키텍처 접근 방법 (결정사항)
▷ 품질 속성 유틸리티 트리
▷ 아키텍처 분석서
▷ 최종 보고서

• 아키텍처 이해
▷ 활동 소개 및 역할 소개
▷ 비즈니스/아키텍처 목표 소개
▷ 작성된 아키텍처 소개

• 아키텍처 분석
▷ 아키텍처 접근 방법 식별
▷ 품질 속성 시나리오 검증
▷ 시나리오, 아키텍처 상세 분석

• 아키텍처 검증
▷ 품질 속성 시나리오 검증
▷ 아키텍처 접근 방법 검증
▷ 검증결과 발표 및 문서화

2) 입력물
- 개발 대상 시스템의 비즈니스 환경
- 개발 환경 및 기술 환경
- 비즈니스 품질 목표
- 시스템 제약사항
- 기능 요구사항
- 핵심 품질 속성
- 품질 속성 시나리오
- 아키텍처 드라이버
- 후보 아키텍처 패턴
- 후보 아키텍처 설계 전술
- 아키텍처 결정사항
- 다양한 관점의 아키텍처 뷰
- 아키텍처 구성요소 설계 문서
- 기타 관련 문서

3) 산출물
- 품질 속성 시나리오 목록
▷ 우선 순위가 결정된 것
- 사용된 아키텍처 접근법 목록
- 위험요소와 비 위험요소
- 품질 속성 유틸리티 트리
- 아키텍처 분석서
-  설계 검증 결과 보고서

아키텍처 결정

1. 평가 기법

1) 평가 기법이란?

아키텍처의 접근법인 품질 속성에 미치는 영향을 판단하여 아키텍처 적합성 판단 및 평가하는 표준 기법

2) 유형
가시적 평가
▷ Inspection, Review, Validation & Verification
비가시적 평가
▷ SAAM, ATAM, CBAM, ARID, ADR

	SAAM
	↓
CBAM↔ATAM─┳─ADR
	         ↓
	       ARID


3) 평가 결과 분석

설계하고 있는 시스템에 대한 아키텍처의 적절성 판단

시스템의 품질 목표 만족
▷ 성능, 시스템 변경, 보안 제약조건, 요구 기능 등 만족

가용 자원 내 시스템 개발
▷ 한정된 인원, 예산, 시간 내 시스템 개발

적절성의 의미
▷ 특정 목표를 위한 상황에서 상대적 의미 존재

모든 품질 목표를 만족시키는 아키텍처는 없음

하나의 품질 목표에 적절한 아키텍처
그러나, 또 다른 품질 목표에는 적절하지 않을 수 있음

! 아키텍처 평가 시 가장 중요한 것은?
목표 설정		우선순위 설정

아키텍처 평가 결과(적절성)는 실수(Scalar)로 표현되지 않음

▷ 평가 결과에 영향을 주는 파라미터들이 구현에 종속적인 경우가 많음

▷ (초기 설계 단계에서는) 결과값이 정확할(구체적일) 수 없음
 
▷ 아키텍처 평가 : 어떤 목표에는 적절하고, 어떤 목표에는 문제가 있을 수 있는지 말해 줌


2. 평가 기법 모델

1) ATAM(Architecture Tradeoff Analysis Method)

아키텍처의 품질 속성에 초점을 맞춘 평가기법으로 품질 속성 간의 상충관계를 평가

ATAM 특징
▷ 명확한 분석, Legacy System 분석에 활용 가능
▷ 비기능적 요구사항(신뢰성, 사용성, 유지 보수성 등) 중심 분석
▷ 아키텍처 스타일, 품질 속성은 SAAM 영향을 받음

ATAM의 수행 단계
-Setup 단계
▷ 평가팀 구성
▷ 평가를 수행하는 조직과 아키텍처를 평가받는 조직 사이에 협력관계 제휴
- Evaluation 단계
▷ 아키텍처 중심
▷ 아키텍처 정보 도출과 분석에 집중
▷ 스테이크 홀더 관점에서 아키텍처 정보 도출과 분석 결과 검증
- Follow-up 단계
▷ 최종 보고서 작성

2) CBAM(Cost Benefit Architecture Method)

아키텍처의 경제적 측면에 초점을 맞춘 평가 기법

CBAM
▷ ATTAM의 결과물을 기반으로 아키텍처의 경제성 분석
▷ ROI 측면의 의사결정을 위한 기준 제시

CBAM의 수행 절차
Step1 시나리오 아키텍처 전략 선택
▷ 시스템의 이해관계자가 고려할 수 있는 시나리오 선택
▷ 각 시나리오별 아키텍처 전략 선택

Step2 품질 속성 이익 평가
▷ 비즈니스가 요구하는 시스템의 성능과 운영과 관련된 품질 속성 도출

Step3 아키텍처 전략에 대한 이익 정량화
▷ 서로 다른 아키텍처 전략에
▷ 요구된 이익의 정량화

Step4 아키텍처 전략의 비용과 일정 간의 관계 정량화
▷ 시스템 이해관계자로부터 비용과 일정 간의 관계를 파악
▷ 아키텍처 전략의 비용 측정

Step5 바람직한 아키텍처 전략의 효과 계산
▷ 평가팀이 각 아키텍처 전략의 비용대비 효과를 평가

Step6 아키텍처 결정
▷ 단계의 평가를 기준으로 비용 대비 효과가 좋은 아키텍처를 결정


3) SAAM(Software Architecture Analysis Method)

사용자의 요구사항 시나리오와 아키텍처 간의 매핑을 통한 적합성 분석

SAAM 특징
▷ 아키텍처의 Modifiability와 Functionality 집중 분석
▷ 평가 경험이 없는 조직에서도 활용 가능

SAAM의 평가 절차

시나리오 개발 → 아키텍쳐 설명 → 시나리오의 분류 및 우선순위 결정 → 
 → 간접 시나리오 각각에 대한 평가  → 시나리오 상호작용 평가 → 전체 평가 생성

! 직접 시나리오
아키텍처에 의해 시나리오가 어떻게 실행되는지 증명

! 간접 시나리오
아키텍처 변화를 리스트하고 변화에 따른 비용 추정

4) ADR(Active Design Review)

! ADR(Active Design Review) 란?

▷ 아키텍처의 구성요소 간의 응집도를 평가하는 기법
▷ 검토자의 실습문제 풀이에 기초한 평가 기법

검토자 
YES/ NO 질문 형태 지양

▷ 질문 내용 : 문서 품질 / 완성도, 설계에서 제공한 서비스의 충분성 / 타당성 적합성

▷ 질문 사례
프로그램마다 예외를 정의했는가?
데이터 타입의 정의?
프로그램이 충분한가?


5) ARID (Architecture Reviews for Intermediate Design)
▷ 전체 아키텍처가 아닌 특정 부분에 대한 품질 요소에 집중하여 평가
▷ ADR과 ATAM의 하이브리드 기법

ARID의 목적
▷ 아키텍처 설계의 적절성 판정

ARID의 수행 절차
시나리오 개발 → 설계 브리핑 준비 → 핵심 시나리오 준비 → 자료 준비 → ARID 발표 → 
 → 설계발표 → 브리엔스톰과 시나리오 우선순위 결정 → 시나리오 응용 → 요약
						(최우선순위, 의사코드작성)

1. 아키텍처 분석
•아키텍처는 의사결정의 중요한 수단으로 아키텍처 분석은 프로젝트 초반에 문제를 
찾아내어 좀 더 좋은 품질의 소프트웨어 아키텍처 설계를 가능하게 함

•아키텍처 분석은 문제점을 조기 식별할 수 있게 하며 시트 품질, 프로젝트 일정, 예산 조직 구조 
등에 영향을 줌

•아키텍처 분석을 통하여 이해관계자 간의 의사소통, 명확한 품질 목표를 정의하여 우선순위를 
결정 가능한 이점이 있음

•분석 시점은 일반적으로 요구사항 분석 후 상세설계 전에 분석을 시행하지만 최근 들어 개발 
라이프 사이클 모든 기간 동안 언제든지 분석을 수행하기도 함

2. 아키텍처 결정
•아키텍처 평가 기법은 아키텍처의 접근법인 품질 속성에 미치는 영향을 판단하여 아키텍처 적합성을 
판단 및 평가하는 표준 기법으로 가시적 평가, 비가시적 평가 유형으로 분류할 수 있음

•ATAM 기법
▷ 아키텍처의 품질 속성에 초점을 맞춘 평가기법으로 품질 속성 간의 상충관계를 평가함

•CBAM 기법
▷ 아키텍처의 경제적 측면에 초점을 맞춘 기법

• SAAM 기법
▷ 사용자의 요구사항 시나리오와 아키텍처 간의 매핑을 통하여 적합성을 분석하는 기법

•ADR 기법
▷ 아키텍처 구성요소 간의 응집도를 평가하는 기법

•ARID 기법
▷ 전체 아키텍처가 아닌 특정 부분에 대한 품질요소에 집중하여 평가하는 방법



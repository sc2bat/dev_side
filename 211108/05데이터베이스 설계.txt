응용 SW 기초 활용 기술 part 2
데이터베이스 설계


관계형 모델
데이터베이스 설계


관계형 모델의 기본 용어, 키, 제약조건을 설명할 수 있다.
데이터베이스 설계 과정에서 도출된 E-R 다이어그램을 이용하여 테이블을 정의할 수 있다.

1. 개요

논리적 데이터모델링
E-R 다이어그램에서 표현된 개념적 구조를 논리적인 구조로 표현

관계형 모델
1 관계형 데이터베이스의 기반 모델
2 데이터를 테이블 형태로 표현
3 하나의 개체에 관련된 데이터를 하나의 릴레이션으로 표현

2. 기본용어
Relation(관계)
- 관계형 모델에서 하나의 개체를 테이블 형태로 나타내는 것
- 데이터를 저장하는 기본 단위
- 릴레이션 스키마와 릴레이션 인스턴스로 구성됨

학생 릴레이션의 예

학번 	  이름 	학과 		성별
20153301 홍길동 	전기전자공학과 	남
20153302 성춘향 	기계공학과 	여
20142134 박기동 	전기전자공학과 	남
	
릴레이션 스키마
- 릴레이션의 이름과 속성 명을 정의하는 릴레이션의 논리적인 구조 
- 릴레이션 이름(속성명1, 속성명2, … 속성명n)
예 학생(학번, 이름, 학과코드, 성별)

릴레이션 인스턴스
- 릴레이션 내에 존재하는 투플들의 집합

! 릴레이션에 저장되는 데이터들은 수시로 추가 · 삭제 · 수정될 수 있기 때문에 시점에 따라 다를 수 있음

속성(Attribute)
- 릴레이션의 열
- 개체의 구체적인 정보 항목에 해당

투플(Tupple)
- 릴레이션의 행
- 실제 데이터의 속성 값을 가지는 개체의 인스턴스

도메인(Domain)
- 하나의 속성이 가질 수 있는 값들의 집합
- 속성에 실제 값을 저장할 때, 저장되는 값들이 적절한지 시스템이 판단하는데 이용
예 성별 속성의 도메인 {남, 여} 

! 학번이나 이름 속성처럼 가질 수 있는 값들의 경우가 수가 너무 많을 경우 도메인을 지정할 수 없음

3. 키의 종류
키
릴레이션에 포함된 투플들 중 하나의 투플을 특정 지을 수 있도록 하는 속성 또는 속성들의 집합

릴레이션에서 저장되는 모든 투플들을 구별하는 키

학번과 이름의 속성 집합을 키로 사용할 경우, 학번과 이름이 모두 같은 학생이
존재하지 않으므로 릴레이션에 저장되는 모든 투플들을 구별할 수 있음

1 슈퍼 키(Super Key)
- 유일성
• 릴레이션에서 키로 지정된 속성의 값은 투플마다 달라야 함을 의미
- 유일성을 만족시키는 속성 혹은 속성들의 집합으로 구성
예 학번

2 후보 키(Candidate Key)
- 투플의 유일성을 만족하기 위해 꼭 필요한 최소한의 속성들
- 슈퍼 키에서 최소성을 만족하는 키
- 중복된 속성 값을 가지지 않는 속성

3 기본 키(Primary Key)
- 후보 키 중 데이터베이스 설계자나 관리자가 기본적으로 사용하기 위해 선택한 키
- NULL 값을 가질 수 없음
• NULL 값은 아직 결정되지 않거나 존재하지 않는 값을 의미하며, 0이나 공백과는 다름
- 릴레이션 스키마에서 속성 명에 밑줄을 그어 표시함

4 대체 키(Alternate Key)
- 후보 키 중 기본 키로 선택되지 못한 후보 키로써 기본 키로 사용될 수 있음

5 외래 키(Foreign Key)
- 다른 릴레이션의 기본 키를 참조하는 속성(키)
- 기본 키와 달리 NULL 값을 가질 수 있음


4. 제약조건
데이터의 무결성
- 데이터에 결함이 없는 상태
- 데이터를 정확하고 유효하게 유지하는 것

일반적으로 데이터베이스 관리 시스템은 무결성 제약 조약조건을 사용해 데이터의 무결성을 보장

참조 무결성 제약조건
- 외래 키는 참조할 수 없는 값을 가질 수 없음
• 한 릴레이션에 있는 투플이 다른 릴레이션에 있는 투플을 참조하려면 반드시 참조되는 투플이 해당 릴레이션 내에 있어야 함
개체 무결성 제약조건 
- 기본 키의 값은 NULL을 가질 수 없음
도메인 제약조건 
- 각 속성 값은 반드시 도메인에 속하는 값이어야 함

데이터베이스 설계

1. 데이터베이스 설계
데이터베이스 구현 과정

요구사항 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현

실제 데이터베이스에 데이터를 저장할 경우
		↓
데이터베이스의 구조를 수정하는 것은 복잡하고 어려운 문제이므로, 데이터베이스 설계 시 사용자들의
요구사항을 충분히 조사하고 분석하여 설계해야 함

1) 요구사항 분석
요구사항 분석
- 사용자들의 요구사항을 수집하고 분석
- 데이터베이스의 용도 파악
- 요구사항 명세서 작성

요구사항 명세서
① 학생의 학번, 이름, 주소, 생년월일 등의 개인 정보를 관리한다. 학생은 원하는 과목을 수강
신청하여 수업을 들을 수 있으며, 하나의 학과에 소속된다.
② 학과에 대해서는 학과코드, 학과명, 학과 전화번호를 관리한다.
③ 개설되는 과목들의 과목코드, 과목 명, 과목 개요를 관리한다. 


2) 개념적 설계
개념적 설계
- 개념적 데이터 모델을 이용하여 개념적 구조 도출
- 개체-관계 모델을 이용하여 E-R 다이어그램으로 표현
• 일반적으로 요구사항 명세서의 명사는 개체, 동사는 관계
• 다른 명사에 포함되는 명사는 개체의 속성이 됨
• 조직을 운영하는 데 꼭 필요한 사물이나 개념을 개체로 선정 후, 관계를 정의


- E-R 다이어그램 작성의 예 pdf 11 12
① 학생의 학번, 이름, 주소, 생년월일 등의 개인 정보를 관리한다. 학생은 원하는 과목을 수강
신청하여 수업을 들을 수 있으며, 하나의 학과에 소속된다.
② 학과에 대해서는 학과코드, 학과명, 학과 전화번호를 관리한다.
③ 개설되는 과목들의 과목코드, 과목 명, 과목 개요를 관리한다. 

개체를 선정한 후, 각 개체 간의 관계를 나타내는 동사를 통해 각 개체 간의 관계를 정의함

① 학생의 학번, 이름, 주소, 생년월일의 개인 정보를 관리한다. 학생은 원하는 과목을
수강 신청하여 수업을 들을 수 있으며, 반드시 하나의 학과를 전공한다.
② 학과에 대해서는 학과코드, 학과명, 학과전화번호를 관리한다.
③ 개설되는 과목들의 과목코드, 과목 명, 과목개요를 관리한다. 

① 학생의 학번, 이름, 주소, 생년월일의 개인 정보를 관리한다. 학생은 원하는 과목을
수강 신청하여 수업을 들을 수 있으며, 반드시 하나의 학과를 전공한다.
② 학과에 대해서는 학과코드, 학과명, 학과전화번호를 관리한다.
③ 개설되는 과목들의 과목코드, 과목 명, 과목개요를 관리한다. 

3) 논리적 설계

논리적 설계
개념적 설계 과정을 통해 도출된 개념적 구조를 기반으로 데이터베이스 관리 시스템에 적합한 논리적 구조로 표현하는 과정
		↓
관계형 모델을 가장 많이 이용

- 릴레이션 스키마로 표현

릴레이션 스키마 변환 규칙
1 모든 개체는 릴레이션으로 변환 
2 M : N 관계는 릴레이션으로 변환 
3 다중 값 속성은 릴레이션으로 변환
4 1 : N 관계, 1 : 1 관계는 외래키로 표

학생 릴레이션	학번	 이름 	주소 	생년월일 	학과코드
학과 릴레이션	학과코드 		학과명 		전화번호
과목 릴레이션	과목코드 		과목 명 		과목개요
등록 릴레이션	등록코드	학번 	과목코드 		등록일

데이터 모델링 프로그램

데이터 모델링의 모든 과정을 E-R 다이어그램을 이용하여 표현
- 개념 ERD, 논리 ERD, 물리 ERD

데이터 모델링 프로그램의 종류
- ERwin, MicroDesigner, DBDesigner 등

다수의 데이터 모델링 프로그램에서 관계를 나타내기 위해 까마귀발 표기법으로 불리는
Crow’s Foot을 많이 사용

pdf 15

4) 물리적 설계

물리적 설계
선정한 데이터베이스 관리 시스템에 적합하도록 논리적 구조를 기반으로 물리적 구조를 설계하는 과정

릴레이션 테이블(Table) | 속성 열(Column) | 투플 행(Row)
각 테이블과 열의 이름, 데이터타입과 크기, 제약조건 등을 지정
pdf16
물리 ERD

데이터베이스 구현 실습
SSMS 실행
SQL Server management 실행
데이트베이스
새 데이트베이스 생성
이름 school 
하위에 student 테이블 정의
std_code char(10)	Null x 기본키지정
name char(10)	Null x
address varchar(50)Null x
birthday date	Null o
dep_code char(10)	Null x
student 로 저장

dep_code char(10) Null x
tel varchar(20)	 Null x
dep_name varchar(30) Null x
department 로 저장

두 테이블 연결
student 테이블에서 관계 추가 테이블 및 열 
기본키 테이블 department  dep_code
외래키 테이블 student dep_code

저장

테이블 항목에서 student 새로고침

student 테이블 항목 기본키와 외래키 확인 테이블간 연결확인


